# API REST:
# - POST /{federationContextId}/artefact
#     Uploads application artefact on partner OP. Artefact is a zip file containing scripts and/or packaging files like Terraform or Helm which are required to create an instance of an application.
# - GET /{federationContextId}/artefact/{artefactId}
#     Retrieves details about an artefact.
# - DELETE /{federationContextId}/artefact/{artefactId}
#     Removes an artefact from partner OP.
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  name: artefactmanagement.federation.com
spec:
  group: federation.com
  names:
    plural: artefactmanagement
    singular: artefactmanagement
    kind: ArtefactManagement
    shortNames:
      - art-man
  scope: Namespaced
  versions:
    - name: v1
      served: true
      storage: true
      subresources:
        status: {}
      additionalPrinterColumns:
        - jsonPath: .spec.federationContextId
          name: federationContextId
          type: string
        - jsonPath: .spec.artefactId
          name: artefactId
          type: string
        - jsonPath: .status.state
          name: state
          type: string
        - jsonPath: .status.lastUpdated
          name: lastUpdated
          type: string
      schema:
        openAPIV3Schema:
          type: object
          properties:
            spec:
              type: object
              required: [federationContextId,artefactId]
              properties:
                federationContextId:
                    type: string
                    pattern: ^[A-Za-z0-9][A-Za-z0-9-]*$
                    description: This identifier shall be provided by the partner OP on successful verification and validation of the federation create request and is used by partner op to identify this newly created federation context. Originating OP shall provide this identifier in any subsequent request towards the partner op.              
                artefactId:
                  type: string
                  format: uuid
                  description: A globally unique identifier associated with the artefact. Originating OP generates this identifier when artefact is submitted over NBI.  
                artefactBody:
                  type: object
                  required: [appProviderId,artefactName,artefactVersionInfo,artefactVirtType,artefactDescriptorType,componentSpec]
                  properties:
                    appProviderId:
                      type: string
                      pattern: ^[A-Za-z][A-Za-z0-9_]{7,63}$
                      description: UserId of the app provider.  Identifier is relevant only in context of this federation.
                    artefactName:
                      type: string
                      pattern: ^[A-Za-z][A-Za-z0-9_]{7,31}$
                      description: Name of the artefact.
                    artefactVersionInfo:
                      type: string
                      description: Artefact version information
                    artefactDescription:
                      type: string
                      maxLength: 256
                      description: Brief description of the artefact by the application provider
                    artefactVirtType:
                      type: string
                      enum: [VM_TYPE,CONTAINER_TYPE]
                    artefactFileName:
                      type: string
                      minLength: 8
                      maxLength: 32
                      description: Name of the file.
                    artefactFileFormat:
                      type: string
                      enum: [ZIP, TAR, TEXT, TARGZ]
                      description: Artefacts like Helm charts or Terraform scripts may need compressed format.
                    artefactDescriptorType:
                      type: string
                      enum: [HELM,TERRAFORM,ANSIBLE,SHELL,COMPONENTSPEC]
                      description: Type of descriptor present in the artefact.  App provider can either define either a Helm chart or a Terraform script or container spec.
                    repoType:
                      type: string
                      enum: [PRIVATEREPO,PUBLICREPO,UPLOAD]
                      description: Artefact or file repository location. PUBLICREPO is used of public URLs like GitHub, Helm repo, docker registry etc., PRIVATEREPO is used for private repo managed by the application developer, UPLOAD is for the case when artefact/file is uploaded from MEC web portal.  OP should pull the image from ‘repoUrl' immediately after receiving the request and then send back the response. In case the repoURL corresponds to a docker registry, use docker v2 http api to do the pull.
                    artefactRepoLocation:
                      type: object
                      properties:
                        repoURL:
                          type: string
                        userName:
                          type: string
                          description: Username to access the repository
                        password:
                          type: string
                          description: Password to access the repository
                        token:
                          type: string
                          description: Authorization token to access the repository
                    componentSpec:
                      description: Details about compute, networking and storage requirements for each component of the application. App provider should define all information needed to instantiate the component. If artefact is being defined at component level this section should have information just about the component. In case the artefact is being defined at application level the section should provide details about all the components.
                      type: object
                      required: [componentName,images,numOfInstances,restartPolicy,computeResourceProfile]
                      properties:
                        componentName:
                          type: string
                          pattern: ^[A-Za-z0-9][A-Za-z0-9_]{6,62}[A-Za-z0-9]$
                          description: Must be a valid RFC 1035 label name.  Component name must be unique with an application
                        images:
                          description: List of all images associated with the component. Images are specified using the file identifiers. Partner OP provides these images using file upload api.
                          type: array
                          items:
                            type: string
                            format: uuid
                            description: A globally unique identifier associated with the image file. Originating OP generates this identifier when file is uploaded over NBI.
                          minItems: 1
                        numOfInstances:
                          type: integer
                          format: int32
                          description: Number of component instances to be launched.
                        restartPolicy:
                          type: string
                          enum: [RESTART_POLICY_ALWAYS,RESTART_POLICY_NEVER]
                          description: How the platform shall handle component failure
                        commandLineParams:
                          description: List of commands and arguments that shall be invoked when the component instance is created. This is valid only for container based deployment.
                          type: object
                          required: [command]
                          properties:
                            command:
                              type: array
                              items:
                                type: string
                              description: List of commands that application should invoke when an instance is created.
                            commandArgs:
                              type: array
                              items:
                                type: string
                              description: List of arguments required by the command.
                        exposedInterfaces:
                          description: Each application component exposes some ports either for external users or for inter component communication. Application provider is required to specify which ports are to be exposed and the type of traffic that will flow through these ports.
                          type: array
                          items:
                            type: object
                            required:
                              - interfaceId
                              - commProtocol
                              - commPort
                              - visibilityType
                            properties:
                              interfaceId:
                                type: string
                                description: Each Port and corresponding traffic protocol exposed by the component is identified by a name. Application client on user device requires this to uniquely identify the interface.
                                pattern: ^[A-Za-z0-9][A-Za-z0-9_]{6,30}[A-Za-z0-9]$
                              commProtocol:
                                type: string
                                enum: [TCP,UDP; HTTP_HTTPS]
                                description: Defines the IP transport communication protocol i.e., TCP, UDP or HTTP
                              commPort:
                                type: integer
                                format: int32
                                minimum: 1
                                maximum: 65535
                                description: Port number exposed by the component. OP may generate a dynamic port towards the UCs corresponding to this internal port and forward the client traffic from dynamic port to container Port.
                              visibilityType:
                                description: Defines whether the interface is exposed to outer world or not i.e., external, or internal. If this is set to "external", then it is exposed to external applications otherwise it is exposed internally to edge application components within edge cloud. When exposed to external world, an external dynamic port is assigned for UC traffic and mapped to the internal container Port
                                type: string
                                enum: [VISIBILITY_EXTERNAL,VISIBILITY_INTERNAL]
                              network:
                                type: string
                                pattern: ^[A-Za-z][A-Za-z0-9_]{6,30}[A-Za-z0-9]$
                                description: Name of the network.  In case the application has to be associated with more than 1 network then app provider must define the name of the network on which this interface has to be exposed.  This parameter is required only if the port has to be exposed on a specific network other than default.
                              InterfaceName:
                                type: string
                                pattern: ^[a-z][a-z0-9]{3}$
                                description: Interface Name. Required only if application has to be attached to a network other than default.
                          minItems: 1
                        computeResourceProfile:
                          type: object
                          required: [cpuArchType,numCPU,memory]
                          properties:
                            cpuArchType:
                              type: string
                              enum: [ISA_X86_64,ISA_ARM_64]
                              description: CPU Instruction Set Architecture (ISA) E.g., Intel, Arm etc.
                            numCPU:
                              type: string
                              pattern: ^\d+((\.\d{1,3})|(m))?$
                              description: Number of vcpus in whole, decimal up to millivcpu, or millivcpu format.
                            memory:
                              type: integer
                              format: int64
                              description: Amount of RAM in Mbytes
                            diskStorage:
                              type: integer
                              format: int32
                              description: Amount of disk storage in Gbytes for a given ISA type
                            gpu:
                              type: array
                              items:
                                type: object
                                required: [gpuVendorType,gpuModeName,gpuMemory,numGPU]
                                properties:
                                  gpuVendorType:
                                    type: string
                                    enum: [GPU_PROVIDER_NVIDIA,GPU_PROVIDER_AMD]
                                    description: GPU vendor name e.g. NVIDIA, AMD etc.
                                    example: Nvidia
                                  gpuModeName:
                                    type: string
                                    description: Model name corresponding to vendorType may include info e.g. for NVIDIA, model name could be “Tesla M60”, “Tesla V100” etc.
                                  gpuMemory:
                                    type: integer
                                    description: GPU memory in Mbytes
                                  numGPU:
                                    type: integer
                                    description: Number of GPUs
                            vpu:
                              type: integer
                              description: Number of Intel VPUs available for a given ISA type
                            fpga:
                              type: integer
                              description: Number of FPGAs available for a given ISA type
                            hugepages:
                              type: array
                              items:
                                type: object
                                required: [pageSize,number]
                                properties:
                                  pageSize:
                                    type: string
                                    enum: [2MB,4MB,1GB]
                                    description: Size of hugepage
                                  number:
                                    type: integer
                                    description: Total number of huge pages
                            cpuExclusivity:
                              type: boolean
                              description: Support for exclusive CPUs
                        compEnvParams:
                          type: array
                          items:
                            description: Environment variables are key value pairs that should be injected when component in instantiated
                            type: object
                            required: [envVarNam,envValueType]
                            properties:
                              envVarName:
                                type: string
                                pattern: ^[A-Za-z0-9][A-Za-z0-9_]{6,30}[A-Za-z0-9]$
                                description: Name of environment variable
                              envValueType:
                                type: string
                                enum: [USER_DEFINED,PLATFORM_DEFINED_DYNAMIC_PORT,PLATFORM_DEFINED_DNS,PLATFORM_DEFINED_IP]
                              envVarValue:
                                type: string
                                pattern: ^[A-Za-z0-9][A-Za-z0-9_]{6,62}[A-Za-z0-9]$
                                description: Value to be assigned to environment variable
                              envVarSrc:
                                type: string
                                description: Full path of parameter from componentSpec that should be used to generate the environment value. Eg. networkResourceProfile[1]. interfaceId.
                        deploymentConfig:
                          description: Configuration used when deploying a component. May override other ComponentSpec parameters related to deployment like restart policy, command line parameters, environment variables, etc.
                          type: object
                          required: [configType,contents]
                          properties:
                            configType:
                              type: string
                              enum: [DOCKER_COMPOSE,KUBERNETES_MANIFEST,CLOUD_INIT,HELM_VALUES]
                              description: Config type.
                            contents:
                              type: string
                              description: Contents of the configuration.
                        persistentVolumes:
                          description: The ephemeral volume a container process may need to temporary store internal data
                          type: array
                          items:
                            type: object
                            required: [volumeSize,volumeMountPath,volumeName]
                            properties:
                              volumeSize:
                                type: string
                                enum: [10Gi,20Gi,50Gi,100Gi]
                                description: size of the volume given by user (10GB, 20GB, 50 GB or 100GB)
                              volumeMountPath:
                                type: string
                                description: Defines the mount path of the volume
                              volumeName:
                                type: string
                                description: Human readable name for the volume
                              ephemeralType:
                                type: boolean
                                default: false
                                description: It indicates the ephemeral storage on the node and contents are not preserved if containers restarts
                              accessMode:
                                type: string
                                enum: [RW,RO]
                                default: RW
                                description: Values are RW (read/write) and RO (read-only)l
                              sharingPolicy:
                                type: string
                                enum: [EXCLUSIVE,SHARED]
                                default: EXCLUSIVE
                                description: Exclusive or Shared. If shared, then in case of multiple containers same volume will be shared across the containers.
                          minItems: 1
            status:
              type: object
              properties:
                state:
                  type: string
                  description: Current state of the artefact upload
                  enum: [Pending,Uploading,Uploaded,Failed]
                message:
                  type: string
                  description: message indicating details about the current state
                lastUpdated:
                  type: string
                  format: date-time
                  description: Timestamp of the last status update
